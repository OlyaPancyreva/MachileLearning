# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oc-bCLi9q-Sr5kV-bLYmF0_oKEt90mRc
"""

import pandas as pd
import numpy as np
from tqdm.auto import tqdm, trange
import nltk
nltk.download('stopwords')

data = pd.read_csv('dataset.csv', delimiter=';')

data

df_res = pd.DataFrame()
topics = ['Путешествия', 'IT', 'Спорт', 'Политика', 'Книги']
for topic in topics:
    df_topic = data[data['category'] == topic]
    df_res = df_res.append(df_topic, ignore_index=True)

df_res

import string
def remove_punctuation(text):
    return "".join([ch if ch not in string.punctuation else ' ' for ch in text])

def remove_numbers(text):
    return ''.join([i if not i.isdigit() else ' ' for i in text])

import re
def remove_multiple_spaces(text):
	return re.sub(r'\s+', ' ', text, flags=re.I)

from nltk.stem import *
from nltk.corpus import stopwords
from pymystem3 import Mystem
from string import punctuation
mystem = Mystem() 

russian_stopwords = stopwords.words("russian")
russian_stopwords.extend(['…', '«', '»', '...'])
def lemmatize_text(text):
    tokens = mystem.lemmatize(text.lower())
    tokens = [token for token in tokens if token not in russian_stopwords and token != " "]
    text = " ".join(tokens)
    return text

preproccessing = lambda text: (remove_multiple_spaces(remove_numbers(remove_punctuation(text))))
data['preproccessed'] = list(map(preproccessing, df_res['text']))

prep_text = [remove_multiple_spaces(remove_numbers(remove_punctuation(text.lower()))) for text in tqdm(df_res['text'])]

len(prep_text)
prep_text[0]

df_res['text_prep'] = prep_text

df_res.head(3)

from nltk.stem.snowball import SnowballStemmer 
nltk.download('punkt')
from nltk import word_tokenize
stemmer = SnowballStemmer("russian")

russian_stopwords = stopwords.words("russian")
russian_stopwords.extend(['…', '«', '»', '...', 'т.д.', 'т', 'д'])

text = df_res['text_prep'][0]
word_tokenize(text)


from nltk import word_tokenize

stemmed_texts_list = []
for text in tqdm(df_res['text_prep']):
    tokens = word_tokenize(text)    
    stemmed_tokens = [stemmer.stem(token) for token in tokens if token not in russian_stopwords]
    text = " ".join(stemmed_tokens)
    stemmed_texts_list.append(text)

df_res['text_stem'] = stemmed_texts_list

def remove_stop_words(text):
    tokens = word_tokenize(text) 
    tokens = [token for token in tokens if token not in russian_stopwords and token != ' ']
    return " ".join(tokens)

from nltk import word_tokenize

sw_texts_list = []
for text in tqdm(df_res['text_prep']):
    tokens = word_tokenize(text)    
    tokens = [token for token in tokens if token not in russian_stopwords and token != ' ']
    text = " ".join(tokens)
    sw_texts_list.append(text)

df_res['text_sw'] = sw_texts_list

df_res.head()

# lemm_texts_list = []
# for text in tqdm(df_res['text_sw']):
#     try:
#         text_lem = mystem.lemmatize(text)
#         tokens = [token for token in text_lem if token != ' ' and token not in russian_stopwords]
#         text = " ".join(tokens)
#         lemm_texts_list.append(text)
#     except Exception as e:
#         print(e)
    
# df_res['text_lemm'] = lemm_texts_list

X = df_res['text_']
y = df_res['category']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)

from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer

nb = Pipeline([('vect', CountVectorizer()),
               ('tfidf', TfidfTransformer()),
               ('clf', MultinomialNB()),
              ])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# nb.fit(X_train, y_train)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.metrics import classification_report
# y_pred = nb.predict(X_test)

print(y_test, y_pred)

from sklearn.metrics import accuracy_score

my_tags = df_res['category'].unique()

print('accuracy %s' % accuracy_score(y_pred, y_test))
print(classification_report(y_test, y_pred, target_names=my_tags))

from sklearn.linear_model import SGDClassifier

sgd = Pipeline([('vect', CountVectorizer()),
                ('tfidf', TfidfTransformer()),
                ('clf', SGDClassifier(loss='hinge', penalty='l2',alpha=1e-3, random_state=42, max_iter=5, tol=None)),
               ])

sgd.fit(X_train, y_train)

y_pred = sgd.predict(X_test)

print(y_test, y_pred)

print('accuracy %s' % accuracy_score(y_pred, y_test))
print(classification_report(y_test, y_pred,target_names=my_tags))

from sklearn.linear_model import LogisticRegression

logreg = Pipeline([('vect', CountVectorizer()),
                ('tfidf', TfidfTransformer()),
                ('clf', LogisticRegression(n_jobs=1, C=1e5)),
               ])


logreg.fit(X_train, y_train)


y_pred = logreg.predict(X_test)

print('accuracy %s' % accuracy_score(y_pred, y_test))
print(classification_report(y_test, y_pred,target_names=my_tags))

econ_text = '''
Информацио́нные техноло́гии (ИТ, также — информационно-коммуникационные технологии[1][2]) — процессы, методы поиска, сбора, хранения, обработки, предоставления, распространения информации и способы осуществления таких процессов и методов (ФЗ № 149-ФЗ)[3].

Другие определения:

приёмы, способы и методы применения средств вычислительной техники при выполнении функций сбора, хранения, обработки, передачи и использования данных (ГОСТ 34.003-90)[4];
ресурсы, необходимые для сбора, обработки, хранения и распространения информации (ISO/IEC 38500:2015)[5].
Специалистов в области информационных систем и технологий часто называют ИТ- или IT-специалистами (от англ. Information technology).


Основные средства
Информационные технологии охватывают все ресурсы, необходимые для управления информацией, особенно компьютеры, программное обеспечение и сети, необходимые для создания, хранения, управления, передачи и поиска информации. Информационные технологии могут быть сгруппированы следующим образом[9]:

Технические средства;
Коммуникационные средства;
Организационно-методическое обеспечение;
Стандартизация.

Информационные технологии призваны, основываясь и рационально используя современные достижения в области компьютерной техники и иных высоких технологий, новейших средств коммуникации, программного обеспечения и практического опыта, решать задачи по эффективной организации информационного процесса для снижения затрат времени, труда, энергии и материальных ресурсов во всех сферах человеческой жизни и современного общества. Информационные технологии взаимодействуют и часто составляющей частью входят в сферы услуг, области управления, промышленного производства, социальных процессов[6].
'''


econ_text = remove_multiple_spaces(remove_numbers(remove_punctuation(econ_text.lower())))
econ_text = remove_stop_words(econ_text)


econ_text

ect_pred = nb.predict([econ_text])
ect_pred